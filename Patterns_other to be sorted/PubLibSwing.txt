PubLibSwing

import theEccentricTrader/PubLibSwing/3


// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © theEccentricTrader
//@version=6

// @description swing high and swing low conditions, prices, bar indices and range ratios for indicator and strategy development
library('PubLibSwing')

/////////////
// IMPORTS //
/////////////

import theEccentricTrader/PubLibCandleTrend/2 as ct

/////////////////////////////////////////
// SWING HIGH AND SWING LOW CONDITIONS //
/////////////////////////////////////////

// @function swing high condition
// @returns bool
export sh() =>
    ct.gc()[1] and ct.rc()

// @function swing low condition
// @returns bool
export sl() =>
    ct.rc()[1] and ct.gc()

//////////////////////////////////////////
// SWING HIGH AND SWING LOW BAR INDICES //
//////////////////////////////////////////

// @function swing high bar index, condition occurrence n
// @param int occurrence
// @returns int
export shbi(int occ) =>
    ta.valuewhen(sh(), bar_index, occ)

// @function swing low bar index, condition occurrence n
// @param int occurrence
// @returns int
export slbi(int occ) =>
    ta.valuewhen(sl(), bar_index, occ)

///////////////////////////////////////////
// SWING HIGH AND SWING LOW CLOSE PRICES //
///////////////////////////////////////////

// @function swing high close price, condition occurrence n
// @param int occurrence  
// @returns float
export shcp(int occ) =>
    ta.valuewhen(sh(), close, occ)

// @function swing low close price, condition occurrence n
// @param int occurrence
// @returns float
export slcp(int occ) =>
    ta.valuewhen(sl(), close, occ)

/////////////////////////////////////
// SWING HIGH AND SWING LOW PRICES //
/////////////////////////////////////

// @function swing high price, condition occurrence n
// @param int occurrence  
// @returns float
export shp(int occ) =>
    ta.valuewhen(sh(), high >= high[1] ? high : high[1], occ)

// @function swing low price, condition occurrence n
// @param int occurrence
// @returns float
export slp(int occ) =>
    ta.valuewhen(sl(), low <= low[1] ? low : low[1], occ)

////////////////////////////////////////////////
// SWING HIGH AND SWING LOW PRICE BAR INDICES //
////////////////////////////////////////////////

// @function swing high price bar index, condition occurrence n
// @param int occurrence
// @returns int
export shpbi(int occ) =>
    ta.valuewhen(sh(), high >= high[1] ? bar_index : bar_index[1], occ)

// @function swing low price bar index, condition occurrence n
// @param int occurrence
// @returns int
export slpbi(int occ) =>
    ta.valuewhen(sl(), low <= low[1] ? bar_index : bar_index[1], occ)

///////////////////////////////////////////
// SWING HIGH AND SWING LOW RANGE RATIOS //
///////////////////////////////////////////

// @function swing high range ratio, condition occurrence n
// @param int occurrence
// @returns float
export shrr(int occ) =>
    ta.valuewhen(sh(), (shp(0) - slp(0)) / (shp(0)[1] - slp(0)) * 100, occ)

// @function swing low range ratio, condition occurrence n
// @param int occurrence
// @returns float
export slrr(int occ) =>
    ta.valuewhen(sl(), (shp(0) - slp(0)) / (shp(0) - slp(0)[1]) * 100, occ)
