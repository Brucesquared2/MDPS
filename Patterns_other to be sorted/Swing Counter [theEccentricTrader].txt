Swing Counter [theEccentricTrader]

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© theEccentricTrader
//@version=6

indicator('Swing Counter [theEccentricTrader]', overlay = true, max_lines_count = 500)

/////////////
// IMPORTS //
/////////////

import theEccentricTrader/PubLibSwing/3 as sw
import theEccentricTrader/PubLibTrend/2 as tr
import theEccentricTrader/PubLibUtility/2 as ut

///////////////////////////
// CONDITIONAL VARIABLES //
///////////////////////////

sh = sw.sh()
sl = sw.sl()

shp_0 = sw.shp(0)
shpbi_0 = sw.shpbi(0)
shp_1 = sw.shp(1)
shpbi_1 = sw.shpbi(1)

slp_0 = sw.slp(0)
slpbi_0 = sw.slpbi(0)
slp_1 = sw.slp(1)
slpbi_1 = sw.slpbi(1)

rlut = tr.rlut()
dt = tr.dt()
ut = tr.ut()
rldt = tr.rldt()
dtop = tr.dtop()
dbot = tr.dbot()

//////////////////////////
// SAMPLE PERIOD FILTER //
//////////////////////////

show_sp = input(defval = true, title = 'Show Sample Period', group = 'Sample Period')
start = input.time(timestamp('2 Jan 1800 00:00'), title = 'Start Date', group = 'Sample Period')
end = input.time(timestamp('1 Jan 3000 00:00'), title = 'End Date', group = 'Sample Period')
sp_filt = time >= start and time <= end

var first_candle = time

start_date_text = first_candle > start ? ut.time_string(first_candle) : ut.time_string(start)
end_date_text = time >= end ? '-' + ut.time_string(end) : '-' + ut.time_string(time)

////////////////////
// SWING COUNTERS //
////////////////////

var sh_count = 0
var sl_count = 0
var rlut_count = 0
var ut_count = 0
var dt_count = 0
var redt_count = 0
var dtop_count = 0
var dbot_count = 0

if sh and sp_filt and barstate.isconfirmed
    sh_count := sh_count + 1

if sl and sp_filt and barstate.isconfirmed
    sl_count := sl_count + 1

if sh and rlut and sp_filt and barstate.isconfirmed
    rlut_count := rlut_count + 1

if sl and ut and sp_filt and barstate.isconfirmed
    ut_count := ut_count + 1

if sh and dt and sp_filt and barstate.isconfirmed
    dt_count := dt_count + 1

if sl and rldt and sp_filt and barstate.isconfirmed
    redt_count := redt_count + 1

if sh and dtop and sp_filt and barstate.isconfirmed
    dtop_count := dtop_count + 1

if sl and dbot and sp_filt and barstate.isconfirmed
    dbot_count := dbot_count + 1

///////////
// LINES //
///////////

show_lines = input(defval = true, title = 'Show Lines', group = 'Lines')

if show_lines and sh and barstate.isconfirmed
    line.new(shpbi_1, shp_1, shpbi_0, shp_0, color = shp_0 > shp_1 ? color.green : color.red)

if show_lines and sl and barstate.isconfirmed
    line.new(slpbi_1, slp_1, slpbi_0, slp_0, color = slp_0 > slp_1 ? color.green : color.red)

///////////
// PLOTS //
///////////

show_plots = input(defval = true, title = 'Show Plots', group = 'Plots')

plotshape(show_plots and sh and rlut and sp_filt and high >= high[1] and barstate.isconfirmed, style = shape.triangleup, color = color.green, text = 'RLUT', textcolor = color.green)
plotshape(show_plots and sh and rlut and sp_filt and high < high[1] and barstate.isconfirmed, style = shape.triangleup, color = color.green, text = 'RLUT', textcolor = color.green, offset = -1)

plotshape(show_plots and sl and ut and sp_filt and low <= low[1] and barstate.isconfirmed, style = shape.triangleup, color = color.green, text = 'UT', textcolor = color.green, location = location.belowbar)
plotshape(show_plots and sl and ut and sp_filt and low > low[1] and barstate.isconfirmed, style = shape.triangleup, color = color.green, text = 'UT', textcolor = color.green, location = location.belowbar, offset = -1)

plotshape(show_plots and sh and dt and sp_filt and high >= high[1] and barstate.isconfirmed, style = shape.triangledown, color = color.red, text = 'DT', textcolor = color.red)
plotshape(show_plots and sh and dt and sp_filt and high < high[1] and barstate.isconfirmed, style = shape.triangledown, color = color.red, text = 'DT', textcolor = color.red, offset = -1)

plotshape(show_plots and sl and rldt and sp_filt and low <= low[1] and barstate.isconfirmed, style = shape.triangledown, color = color.red, text = 'RLDT', textcolor = color.red, location = location.belowbar)
plotshape(show_plots and sl and rldt and sp_filt and low > low[1] and barstate.isconfirmed, style = shape.triangledown, color = color.red, text = 'RLDT', textcolor = color.red, location = location.belowbar, offset = -1)

plotshape(show_plots and sh and dtop and sp_filt and barstate.isconfirmed, style = shape.diamond, color = color.blue, text = 'DP', textcolor = color.blue)
plotshape(show_plots and sl and dbot and sp_filt and barstate.isconfirmed, style = shape.diamond, color = color.blue, text = 'DT', textcolor = color.blue, location = location.belowbar)

///////////
// TABLE //
///////////

tab_pos = input.string(title = 'Position', defval = 'Top Right', options = ['Top Right', 'Top Center', 'Top Left', 'Bottom Right', 'Bottom Center', 'Bottom Left', 'Middle Right', 'Middle Center', 'Middle Left'], group = 'Table')

text_size = input.string(title = 'Text Size', defval = 'Normal', options = ['Tiny', 'Small', 'Normal', 'Large'], group = 'Table')

var swingTable = table.new(ut.tab_pos(tab_pos), 100, 100, border_width = 1)

if barstate.islast

    table.cell(swingTable, 0, 0, text = 'Peaks', bgcolor = color.blue, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 0, 1, text = 'Troughs', bgcolor = color.blue, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 0, 2, text = 'Higher Peaks', bgcolor = color.green, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 0, 3, text = 'Higher Troughs', bgcolor = color.green, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 0, 4, text = 'Lower Peaks', bgcolor = color.red, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 0, 5, text = 'Lower Troughs', bgcolor = color.red, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 0, 6, text = 'Double-Top Peaks', bgcolor = color.blue, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 0, 7, text = 'Double-Bottom Troughs', bgcolor = color.blue, text_color = color.white, text_size = ut.size(text_size))

    table.cell(swingTable, 1, 0, text = str.tostring(sh_count), bgcolor = color.blue, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 1, 1, text = str.tostring(sl_count), bgcolor = color.blue, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 1, 2, text = str.tostring(rlut_count), bgcolor = color.green, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 1, 3, text = str.tostring(ut_count), bgcolor = color.green, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 1, 4, text = str.tostring(dt_count), bgcolor = color.red, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 1, 5, text = str.tostring(redt_count), bgcolor = color.red, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 1, 6, text = str.tostring(dtop_count), bgcolor = color.blue, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 1, 7, text = str.tostring(dbot_count), bgcolor = color.blue, text_color = color.white, text_size = ut.size(text_size))

    table.cell(swingTable, 2, 1, text = '%', bgcolor = color.blue, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 2, 2, text = str.tostring(math.round(rlut_count / sh_count * 100, 2)), bgcolor = color.green, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 2, 3, text = str.tostring(math.round(ut_count / sl_count * 100, 2)), bgcolor = color.green, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 2, 4, text = str.tostring(math.round(dt_count / sh_count * 100, 2)), bgcolor = color.red, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 2, 5, text = str.tostring(math.round(redt_count / sl_count * 100, 2)), bgcolor = color.red, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 2, 6, text = str.tostring(math.round(dtop_count / sh_count * 100, 2)), bgcolor = color.blue, text_color = color.white, text_size = ut.size(text_size))
    table.cell(swingTable, 2, 7, text = str.tostring(math.round(dbot_count / sl_count * 100, 2)), bgcolor = color.blue, text_color = color.white, text_size = ut.size(text_size))

if show_sp and barstate.islast
    table.cell(swingTable, 0, 8, text = start_date_text + end_date_text, bgcolor = color.blue, text_color = color.white, text_size = ut.size(text_size))

